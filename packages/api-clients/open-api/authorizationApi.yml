openapi: 3.0.3

info:
  title: Security Process Micro Service
  description: This service is the security supplier
  version: "{{version}}"
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: "http://swagger.io/terms/"
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: "/"
    description: This service is the security supplier
security:
  - bearerAuth: []
tags:
  - name: client
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: producerKeychain
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: tokenGeneration
    description: Token generation
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: key
    description: Keys routes
    externalDocs:
      description: Find out more
      url: "http://swagger.io"
paths:
  /clientsConsumer:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create a new consumer client
      description: Create a new consumer client
      operationId: createConsumerClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSeed"
      responses:
        "200":
          description: Client created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullClient"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clientsApi:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create a new API client
      description: Create a new API client
      operationId: createApiClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSeed"
      responses:
        "200":
          description: Client created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullClient"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clientsWithKeys:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: List clients with keys
      description: List clients with keys
      operationId: getClientsWithKeys
      parameters:
        - in: query
          name: name
          description: Filter for the client name
          schema:
            type: string
        - in: query
          name: userIds
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
        - name: consumerId
          in: query
          description: ID of Consumer that MUST be related to the Client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: query
          description: ID of Purpose that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: kind
          in: query
          description: type of Client to be retrieved
          schema:
            $ref: "#/components/schemas/ClientKind"
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: Clients found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientsWithKeys"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: List clients
      description: List clients
      operationId: getClients
      parameters:
        - in: query
          name: name
          description: Filter for the client name
          schema:
            type: string
        - in: query
          name: userIds
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
        - name: consumerId
          in: query
          description: ID of Consumer that MUST be related to the Client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: query
          description: ID of Purpose that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: kind
          in: query
          description: type of Client to be retrieved
          schema:
            $ref: "#/components/schemas/ClientKind"
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: Clients found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clients"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients/{clientId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      description: Retrieves a Client
      tags:
        - client
      summary: Get a Client
      operationId: getClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Client retrieved
          headers:
            X-Metadata-Version:
              $ref: "#/components/headers/MetadataVersionHeader"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      description: Deletes a Client
      tags:
        - client
      summary: Delete a Client
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client deleted
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: ID of Client the users belong to
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - client
      summary: List client users
      description: List client users
      operationId: getClientUsers
      responses:
        "200":
          description: Request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - client
      summary: Add users to a Client
      operationId: addUsers
      requestBody:
        required: true
        description: List of users ids to add
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    format: uuid
      responses:
        "200":
          description: Users added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullClient"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Missing Required Information
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      description: Add users to a Client
  "/clients/{clientId}/admin":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: ID of the API client where to set the admin user
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - client
      summary: Set Admin to an API Client
      operationId: setAdminToClient
      description: Sets an admin user to a Client
      requestBody:
        required: true
        description: AdminId to be set to the Client
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - adminId
              properties:
                adminId:
                  type: string
                  format: uuid
      responses:
        "200":
          description: Admin set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullClient"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Missing Required Information
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: User already an admin for the client
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users/{userId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: The Client id
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: The identifier of the user between the security user and the consumer
        required: true
        schema:
          type: string
          format: uuid
    delete:
      description: Removes a user from a Client
      tags:
        - client
      summary: Remove a user from a Client
      operationId: removeUser
      responses:
        "204":
          description: User removed
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client or User not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/keys":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create Key for the specific clientId.
      operationId: createKey
      responses:
        "200":
          description: Key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeySeed"
      description: Creates one or more keys for the corresponding client.
      parameters:
        - name: clientId
          in: path
          required: true
          description: ID of client that the added keys MUST belong to
          schema:
            type: string
            format: uuid
    get:
      tags:
        - client
      summary: Returns a set of keys by client ID.
      description: "Given a client identifier it returns its corresponding set of keys, if any"
      operationId: getClientKeys
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: userIds
          in: query
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/keys/{keyId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - client
      summary: Returns a key by client and key identifier (kid).
      description: "Given a client and key identifiers it returns the corresponding key, if any"
      operationId: getClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - client
      summary: Deletes a key by client and key identifier (kid).
      description: "Given a client and key identifiers it deletes the corresponding key, if any"
      operationId: deleteClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: the corresponding key has been deleted.
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/keys/{keyId}/bundle":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      security: []
      tags:
        - tokenGeneration
      summary: Returns a key and its client by client and key identifier (kid).
      description: "Given a client and key identifiers it returns the corresponding key and client, if any"
      operationId: getKeyWithClientByKeyId
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyWithClient"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users/{userId}/keys":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: ID of the client holding the key
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        description: ID of the User that the added keys MUST belong to
        schema:
          type: string
          format: uuid
    get:
      tags:
        - user
      summary: Returns a set of keys by user ID and client ID.
      description: "Given a user and a client it returns its corresponding set of keys, if any"
      operationId: getClientUserKeys
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/purposes":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Adds a purpose to a client
      description: Adds a purpose to a client
      operationId: addClientPurpose
      parameters:
        - name: clientId
          in: path
          description: ID of Client
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Details of the Purpose to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurposeAdditionDetails"
      responses:
        "200":
          description: Client with added purpose
          headers:
            X-Metadata-Version:
              $ref: "#/components/headers/MetadataVersionHeader"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullClient"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/purposes/{purposeId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    delete:
      tags:
        - client
      summary: Removes a purpose from a client
      description: Removes a purpose from a client
      operationId: removeClientPurpose
      parameters:
        - name: clientId
          in: path
          description: ID of Client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: path
          description: ID of Purpose
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Request succeed
          headers:
            X-Metadata-Version:
              $ref: "#/components/headers/MetadataVersionHeader"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullClient"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients/purposes/{purposeId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    delete:
      tags:
        - client
      summary: Removes the purpose from all clients
      description: Removes the purpose from all clients
      operationId: removePurposeFromClients
      parameters:
        - name: purposeId
          in: path
          description: ID of Purpose
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Request succeed
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Purpose Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /internal/clients/{clientId}/admin/{adminId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: ID of Client
        required: true
        schema:
          type: string
          format: uuid
      - name: adminId
        in: path
        description: ID of Admin
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - client
      summary: Removes an admin from a client
      description: Removes an admin from a client
      operationId: internalRemoveClientAdmin
      responses:
        "204":
          description: Request succeed
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /clients/{clientId}/admin/{adminId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: clientId
        in: path
        description: ID of Client
        required: true
        schema:
          type: string
          format: uuid
      - name: adminId
        in: path
        description: ID of Admin
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - client
      summary: Removes an admin from a client
      description: Removes an admin from a client
      operationId: removeClientAdmin
      responses:
        "204":
          description: Request succeed
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /producerKeychains:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - producerKeychain
      summary: Create a producer keychain
      description: Create a producer keychain
      operationId: createProducerKeychain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProducerKeychainSeed"
      responses:
        "200":
          description: Producer keychain created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullProducerKeychain"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    get:
      tags:
        - producerKeychain
      summary: List producer keychains
      description: List producer keychains
      operationId: getProducerKeychains
      parameters:
        - in: query
          name: name
          description: Filter for the producer keychain name
          schema:
            type: string
        - in: query
          name: userIds
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
        - name: producerId
          in: query
          description: ID of producer that MUST be related to the keychain
          schema:
            type: string
            format: uuid
        - name: eserviceId
          in: query
          description: ID of e-service that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
      responses:
        "200":
          description: Producer keychains found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProducerKeychains"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /producerKeychains/{producerKeychainId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      description: Retrieves a Producer Keychain
      tags:
        - producerKeychain
      summary: Get a Producer Keychain
      operationId: getProducerKeychain
      parameters:
        - name: producerKeychainId
          in: path
          description: The Producer Keychain id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Producer Keychain retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProducerKeychain"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Producer Keychain not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      description: Deletes a Producer Keychain
      tags:
        - producerKeychain
      summary: Delete a Producer Keychain
      operationId: deleteProducerKeychain
      parameters:
        - name: producerKeychainId
          in: path
          description: The Producer Keychain id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Producer Keychain deleted
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Producer Keychain not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/producerKeychains/{producerKeychainId}/users":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: producerKeychainId
        in: path
        description: ID of the producer keychain the users belong to
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - producerKeychain
      summary: List Producer Keychain users
      description: List Producer Keychain users
      operationId: getProducerKeychainUsers
      responses:
        "200":
          description: Request succeed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - producerKeychain
      summary: Add users to a Producer Keychain
      operationId: addProducerKeychainUsers
      requestBody:
        required: true
        description: List of users ids to add
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    format: uuid
      responses:
        "200":
          description: Users added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullProducerKeychain"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Missing Required Information
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      description: Add users to a Producer Keychain
  "/producerKeychains/{producerKeychainId}/users/{userId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
      - name: producerKeychainId
        in: path
        description: The Producer Keychain id
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        description: The identifier of the user between the security user and the consumer
        required: true
        schema:
          type: string
          format: uuid
    delete:
      description: Removes a user from a Producer Keychain
      tags:
        - producerKeychain
      summary: Remove a user from a Producer Keychain
      operationId: removeProducerKeychainUser
      responses:
        "204":
          description: User removed
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Producer Keychain or User not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/producerKeychains/{producerKeychainId}/keys":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - producerKeychain
      summary: Create Key for the specific producerKeychainId.
      operationId: createProducerKey
      responses:
        "200":
          description: Key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Producer Keychain id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeySeed"
      description: Create key for the corresponding producer keychain.
      parameters:
        - name: producerKeychainId
          in: path
          required: true
          description: ID of producer keychain that the added keys MUST belong to
          schema:
            type: string
            format: uuid
    get:
      tags:
        - producerKeychain
      summary: Returns a set of keys by producer keychain ID.
      description: "Given a producer keychain identifier it returns its corresponding set of keys, if any"
      operationId: getProducerKeys
      parameters:
        - name: producerKeychainId
          in: path
          description: ID of the producer keychain to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: userIds
          in: query
          description: comma separated sequence of user IDs
          schema:
            type: array
            items:
              type: string
              format: uuid
            default: []
          explode: false
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Producer Keychain id not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/producerKeychains/{producerKeychainId}/keys/{keyId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - producerKeychain
      summary: Returns a key by producer keychain and key identifier (kid).
      description: "Given a producer keychain and key identifiers it returns the corresponding key, if any"
      operationId: getProducerKeyById
      parameters:
        - name: producerKeychainId
          in: path
          description: ID of the producer keychain to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - producerKeychain
      summary: Deletes a key by producer keychain id and key identifier (kid).
      description: "Given a producer keychain and key identifiers it deletes the corresponding key, if any"
      operationId: deleteProducerKeyById
      parameters:
        - name: producerKeychainId
          in: path
          description: ID of the producer keychain holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: the corresponding key has been deleted.
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/producerKeychains/{producerKeychainId}/eservices":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - producerKeychain
      summary: Adds an eservice to a producer keychain
      description: Adds an eservice to a producer keychain
      operationId: addProducerKeychainEService
      parameters:
        - name: producerKeychainId
          in: path
          description: ID of Producer Keychain
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Details of the EService to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EServiceAdditionDetails"
      responses:
        "204":
          description: Request succeed
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/producerKeychains/{producerKeychainId}/eservices/{eserviceId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    delete:
      tags:
        - producerKeychain
      summary: Removes an eservice from a producer keychain
      description: Removes an eservice from a producer keychain
      operationId: removeProducerKeychainEService
      parameters:
        - name: producerKeychainId
          in: path
          description: ID of Producer Keychain
          required: true
          schema:
            type: string
            format: uuid
        - name: eserviceId
          in: path
          description: ID of EService
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Request succeed
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /keys/{kid}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - key
      summary: Retrieve key in JWK format
      description: Retrieve the JWK by kid
      operationId: getJWKByKid
      parameters:
        - name: kid
          in: path
          description: the unique identifier of the key (kid)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the client with the key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientJWK"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /producerKeys/{kid}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - key
      summary: Retrieve a producer key in JWK format
      description: Retrieve the producer JWK by kid
      operationId: getProducerJWKByKid
      parameters:
        - name: kid
          in: path
          description: the unique identifier of the key (kid)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the Key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProducerJWK"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Producer Key not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /status:
    get:
      security: []
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        "200":
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  headers:
    MetadataVersionHeader:
      description: The version number of the resource in the read model
      schema:
        type: integer
        format: int32
  parameters:
    CorrelationIdHeader:
      in: header
      name: X-Correlation-Id
      required: true
      schema:
        type: string
  schemas:
    ClientSeed:
      description: Client creation request body
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 60
        description:
          type: string
          minLength: 10
          maxLength: 250
        members:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - members
    Visibility:
      type: string
      enum: [PARTIAL, FULL]
    Client:
      description: |
        Models a client that can be either a full client or a partial client based on the caller
        tenant. In case the caller tenant is the consumer of the client (i.e., the owner), the
        full client is returned, otherwise a partial client is returned.
      oneOf:
        - $ref: "#/components/schemas/FullClient"
        - $ref: "#/components/schemas/PartialClient"
      discriminator:
        propertyName: visibility
        mapping:
          PARTIAL: "#/components/schemas/PartialClient"
          FULL: "#/components/schemas/FullClient"
    PartialClient:
      type: object
      description: |
        Models a client with a reduced set of fields: only the fields that are
        visible to any caller tenant.
      additionalProperties: false
      properties:
        visibility:
          type: string
          enum: [PARTIAL]
        id:
          type: string
          format: uuid
        consumerId:
          description: |
            The consumerId is the identifier of the tenant that owns the client.
            It is the tenant that created the client and has full access to it.
          type: string
          format: uuid
        kind:
          $ref: "#/components/schemas/ClientKind"
      required:
        - visibility
        - id
        - consumerId
        - kind
    FullClient:
      type: object
      description: |
        Models a client that can be either a Consumer or an API client.
        The owner of the client is the consumer tenant, identified by the consumerId.
        The only fields that are visible to any caller tenant are the ones that are
        present also in the PartialClient schema. The rest are visible only to the owner tenant.
      additionalProperties: false
      properties:
        visibility:
          type: string
          enum: [FULL]
        id:
          type: string
          format: uuid
        name:
          type: string
        consumerId:
          description: |
            The consumerId is the identifier of the tenant that owns the client.
            It is the tenant that created the client and has full access to it.
          type: string
          format: uuid
        adminId:
          description: |
            Id of the admin user associated with the client. Present only for API clients.
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        purposes:
          description: |
            Ids of the purposes associated with the client. Present only for Consumer clients.
          type: array
          items:
            type: string
            format: uuid
          default: []
          uniqueItems: true
        description:
          type: string
        users:
          type: array
          items:
            type: string
            format: uuid
          default: []
          uniqueItems: true
        kind:
          $ref: "#/components/schemas/ClientKind"
      required:
        - visibility
        - id
        - name
        - consumerId
        - purposes
        - users
        - kind
        - createdAt

    ClientKind:
      type: string
      description: kind of client
      enum:
        - CONSUMER
        - API
    ClientJWK:
      description: Key
      type: object
      additionalProperties: false
      properties:
        clientId:
          type: string
          format: uuid
        jwk:
          $ref: "#/components/schemas/JWKKey"
      required:
        - clientId
        - jwk
    ProducerJWK:
      description: Key
      type: object
      additionalProperties: false
      properties:
        producerKeychainId:
          type: string
          format: uuid
        jwk:
          $ref: "#/components/schemas/JWKKey"
      required:
        - producerKeychainId
        - jwk
    ClientWithKeys:
      type: object
      additionalProperties: false
      properties:
        client:
          $ref: "#/components/schemas/Client"
        keys:
          type: array
          items:
            $ref: "#/components/schemas/Key"
      required:
        - client
        - keys
    ClientsWithKeys:
      type: object
      additionalProperties: false
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ClientWithKeys"
        totalCount:
          type: integer
          format: int32
      required:
        - results
        - totalCount
    Clients:
      type: object
      additionalProperties: false
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Client"
        totalCount:
          type: integer
          format: int32
      required:
        - results
        - totalCount
    Users:
      type: array
      items:
        type: string
        format: uuid
    Key:
      description: "Models the PersistentKey"
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
          description: "Represents the identifier of the user"
        kid:
          type: string
        name:
          type: string
        encodedPem:
          type: string
        algorithm:
          type: string
        use:
          $ref: "#/components/schemas/KeyUse"
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - kid
        - name
        - encodedPem
        - algorithm
        - use
        - createdAt
    Keys:
      type: object
      additionalProperties: false
      properties:
        keys:
          type: array
          items:
            $ref: "#/components/schemas/Key"
        totalCount:
          type: integer
          format: int32
      required:
        - keys
        - totalCount
    KeyWithClient:
      type: object
      additionalProperties: false
      properties:
        key:
          $ref: "#/components/schemas/JWKKey"
        client:
          $ref: "#/components/schemas/Client"
      required:
        - key
        - client
    JWKKey:
      description: "Models a JWK"
      type: object
      additionalProperties: false
      properties:
        kty:
          type: string
        key_ops:
          type: array
          items:
            type: string
        use:
          type: string
        alg:
          type: string
        kid:
          type: string
        x5u:
          type: string
          minLength: 1
        x5t:
          type: string
        "x5t#S256":
          type: string
        x5c:
          type: array
          items:
            type: string
        crv:
          type: string
        x:
          type: string
        "y":
          type: string
        d:
          type: string
        k:
          type: string
        "n":
          type: string
        e:
          type: string
        p:
          type: string
        q:
          type: string
        dp:
          type: string
        dq:
          type: string
        qi:
          type: string
        oth:
          uniqueItems: false
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/OtherPrimeInfo"
      required:
        - kty
        - kid
    OtherPrimeInfo:
      title: OtherPrimeInfo
      type: object
      additionalProperties: false
      properties:
        r:
          type: string
        d:
          type: string
        t:
          type: string
      required:
        - r
        - d
        - t
    KeySeed:
      description: "Models the seed for a public key to be persisted"
      type: object
      additionalProperties: false
      properties:
        key:
          type: string
          description: "Base64 UTF-8 encoding of a public key in PEM format"
        use:
          $ref: "#/components/schemas/KeyUse"
        alg:
          type: string
          description: "The algorithm type of the key."
        name:
          type: string
          description: "Name given to the current key."
          minLength: 5
          maxLength: 60
      required:
        - key
        - use
        - alg
        - name
    KeyUse:
      type: string
      description: Represents the Use field of key
      enum:
        - SIG
        - ENC
    PurposeAdditionDetails:
      type: object
      additionalProperties: false
      properties:
        purposeId:
          type: string
          format: uuid
      required:
        - purposeId
    ProducerKeychain:
      description: |
        Models a producer keychain that can be either a full producer keychain or a partial producer keychain based on the caller
        tenant. In case the caller tenant is the producer of the keychain (i.e., the owner), the
        full keychain is returned, otherwise a partial keychain is returned.
      oneOf:
        - $ref: "#/components/schemas/FullProducerKeychain"
        - $ref: "#/components/schemas/PartialProducerKeychain"
      discriminator:
        propertyName: visibility
        mapping:
          PARTIAL: "#/components/schemas/PartialProducerKeychain"
          FULL: "#/components/schemas/FullProducerKeychain"
    FullProducerKeychain:
      description: Models Producer Keychain details
      type: object
      properties:
        visibility:
          type: string
          enum: [FULL]
        id:
          type: string
          format: uuid
        name:
          type: string
        producerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        eservices:
          type: array
          items:
            type: string
            format: uuid
          default: []
        description:
          type: string
        users:
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
        keys:
          type: array
          items:
            $ref: "#/components/schemas/Key"
      required:
        - visibility
        - id
        - name
        - producerId
        - eservices
        - users
        - createdAt
        - description
        - keys
    PartialProducerKeychain:
      type: object
      description: |
        Models a producer keychain with a reduced set of fields: only the fields that are
        visible to any caller tenant.
      additionalProperties: false
      properties:
        visibility:
          type: string
          enum: [PARTIAL]
        id:
          type: string
          format: uuid
        producerId:
          description: |
            The producerId is the identifier of the tenant that owns the keychain.
            It is the tenant that created the keychain and has full access to it.
          type: string
          format: uuid
      required:
        - visibility
        - id
        - producerId
    ProducerKeychains:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ProducerKeychain"
        totalCount:
          type: integer
          format: int32
      required:
        - results
        - totalCount
    ProducerKeychainSeed:
      description: Producer keychain creation request body
      type: object
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 60
        description:
          type: string
          minLength: 10
          maxLength: 250
        members:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - description
        - members
    EServiceAdditionDetails:
      type: object
      properties:
        eserviceId:
          type: string
          format: uuid
      required:
        - eserviceId
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: "^[ -~]{0,64}$"
          type: string
        correlationId:
          description: Unique identifier of the request
          example: "53af4f2d-0c87-41ef-a645-b726a821852b"
          maxLength: 64
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: "^.{0,1024}$"
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/ProblemError"
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: "^[0-9]{3}-[0-9]{4}$"
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: "^.{0,1024}$"
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).
      scheme: bearer
      bearerFormat: JWT
