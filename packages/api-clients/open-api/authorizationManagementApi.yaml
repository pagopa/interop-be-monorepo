openapi: 3.0.3
info:
  title: Key management microservice
  version: "{{version}}"
  contact:
    name: API Support
    url: "http://www.example.com/support"
    email: support@example.com
  description: Manages the persistence and retrieval of client keys.
  termsOfService: "http://swagger.io/terms/"
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: "/authorization-management/{{version}}"
    description: This contains key management routes
tags:
  - name: key
    description: Operations on keys persistence
  - name: migrate
    description: Operations for migration purposes
  - name: client
    description: Operations on clients persistence
  - name: tokenGeneration
    description: Operations about token generation
  - name: health
    description: Operations about service status
security:
  - bearerAuth: []
paths:
  /status:
    get:
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  "/migrate/clients/{clientId}/keys/{keyId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - migrate
      summary: Migrate a Key Relationship to an User
      description: Migrate a Key Relationship to an User
      operationId: migrateKeyRelationshipToUser
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid)
          required: true
          schema:
            type: string
      responses:
        "204":
          description: the corresponding key has been updated.
        "404":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: An User seed
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSeed"
  "/clients/{clientId}/keys/{keyId}/bundle":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      security: []
      tags:
        - tokenGeneration
      summary: Returns a key and its client by client and key identifier (kid).
      description: "Given a client and key identifiers it returns the corresponding key and client, if any"
      operationId: getKeyWithClientByKeyId
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyWithClient"
        "404":
          description: Key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Create Client
      operationId: createClient
      responses:
        "200":
          description: Client created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "400":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Client already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: A Client seed
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientSeed"
      description: Creates a Client
    get:
      tags:
        - client
      summary: List Clients
      operationId: listClients
      responses:
        "200":
          description: Client list retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clients"
        "400":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      description: Lists Clients
      parameters:
        - name: offset
          in: query
          description: Pagination offset
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Pagination limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: userId
          in: query
          description: ID of User that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: consumerId
          in: query
          description: Consumer ID that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: query
          description: Purpose ID that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: kind
          in: query
          description: Type of clients to list
          schema:
            $ref: "#/components/schemas/ClientKind"
  /clients/{clientId}:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      description: Retrieves a Client
      tags:
        - client
      summary: Get a Client
      operationId: getClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Client retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      description: Deletes a Client
      tags:
        - client
      summary: Delete a Client
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client deleted
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/users":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - client
      summary: Add a User to a Client
      operationId: addUser
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "404":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: An User seed
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSeed"
      description: Adds a User to a Client
  "/clients/{clientId}/users/{userId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    delete:
      description: Removes a User from a Client
      tags:
        - client
      summary: Remove a User from a Client
      operationId: removeClientUser
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          description: The user Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User removed
        "404":
          description: Client or User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/keys":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - key
      summary: Create Keys for the specific clientId.
      operationId: createKeys
      responses:
        "200":
          description: Keys created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "400":
          description: Missing Required Information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Client id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeysSeed"
      description: Creates one or more keys for the corresponding client.
      parameters:
        - name: clientId
          in: path
          required: true
          description: ID of client that the added keys MUST belong to
          schema:
            type: string
            format: uuid
    get:
      tags:
        - key
      summary: Returns a set of keys by client ID.
      description: "Given a client identifier it returns its corresponding set of keys, if any"
      operationId: getClientKeys
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keys"
        "404":
          description: Client id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/keys/{keyId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      tags:
        - key
      summary: Returns a key by client and key identifier (kid).
      description: "Given a client and key identifiers it returns the corresponding key, if any"
      operationId: getClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        "404":
          description: Key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - key
      summary: Deletes a key by client and key identifier (kid).
      description: "Given a client and key identifiers it deletes the corresponding key, if any"
      operationId: deleteClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: the corresponding key has been deleted.
        "404":
          description: Key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/purposes":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - purpose
      summary: Adds a purpose for the given client
      description: "Creates a purpose for the given client"
      operationId: addClientPurpose
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PurposeSeed"
      responses:
        "200":
          description: Purpose added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Purpose"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  "/clients/{clientId}/purposes/{purposeId}":
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    get:
      description: Retrieves a Client related to a purpose id
      tags:
        - client
      summary: Get a Client related to a purpose id
      operationId: getClientByPurposeId
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: path
          description: The Purpose id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Client retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
    delete:
      tags:
        - purpose
      summary: Removed a purpose from the given client
      description: "Removed a purpose from the given client"
      operationId: removeClientPurpose
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
            format: uuid
        - name: purposeId
          in: path
          description: The Purpose id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Purpose added
        "404":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /bulk/eservices/{eserviceId}/state:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - purpose
      summary: Updates the EService state for all clients that contain it
      description: "Updates the EService state for all clients that contain it"
      operationId: updateEServiceState
      parameters:
        - name: eserviceId
          in: path
          description: ID of the EService
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientEServiceDetailsUpdate"
      responses:
        "204":
          description: Clients updated
        "400":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /bulk/agreements/eserviceId/{eserviceId}/consumerId/{consumerId}/state:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - purpose
      summary: Updates the Agreement state for all clients that contain it
      description: "Updates the Agreement state for all clients that contain it"
      operationId: updateAgreementState
      parameters:
        - name: eserviceId
          in: path
          description: ID of the EService
          required: true
          schema:
            type: string
            format: uuid
        - name: consumerId
          in: path
          description: ID of the Consumer
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientAgreementDetailsUpdate"
      responses:
        "204":
          description: Clients updated
        "400":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /bulk/agreements/eservices/eserviceId/{eserviceId}/consumerId/{consumerId}/state:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - purpose
      summary: Updates the Agreement and EServices states for all clients that contain it
      description: "Updates the Agreement and EServices states for all clients that contain it"
      operationId: updateAgreementAndEServiceStates
      parameters:
        - name: eserviceId
          in: path
          description: ID of the EService
          required: true
          schema:
            type: string
            format: uuid
        - name: consumerId
          in: path
          description: ID of the Consumer
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientAgreementAndEServiceDetailsUpdate"
      responses:
        "204":
          description: Clients updated
        "400":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
  /bulk/purposes/{purposeId}/state:
    parameters:
      - $ref: "#/components/parameters/CorrelationIdHeader"
    post:
      tags:
        - purpose
      summary: Updates the Purpose state for all clients that contain it
      description: "Updates the Purpose state for all clients that contain it"
      operationId: updatePurposeState
      parameters:
        - name: purposeId
          in: path
          description: ID of the Purpose
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientPurposeDetailsUpdate"
      responses:
        "204":
          description: Clients updated
        "400":
          description: Client not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  parameters:
    CorrelationIdHeader:
      in: header
      name: X-Correlation-Id
      required: true
      schema:
        type: string
  schemas:
    Key:
      description: "Models the PersistentKey"
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
          description: "Represents the identifier of the user whose platform security operator is uploading the key"
        kid:
          type: string
        name:
          type: string
        encodedPem:
          type: string
        algorithm:
          type: string
        use:
          $ref: "#/components/schemas/KeyUse"
        createdAt:
          type: string
          format: date-time
      required:
        - userId
        - kid
        - name
        - encodedPem
        - algorithm
        - use
        - createdAt
    KeySeed:
      description: "Models the seed for a public key to be persisted"
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
          description: "Represents the identifier of the user whose platform security operator is uploading the key"
        key:
          type: string
          description: "Base64 UTF-8 encoding of a public key in PEM format"
        createdAt:
          type: string
          format: date-time
        use:
          $ref: "#/components/schemas/KeyUse"
        alg:
          type: string
          description: "The algorithm type of the key."
        name:
          type: string
          description: "Descriptive name of this key."
      required:
        - userId
        - key
        - use
        - alg
        - name
        - createdAt
    KeysSeed:
      type: array
      items:
        $ref: "#/components/schemas/KeySeed"
    Keys:
      type: object
      additionalProperties: false
      properties:
        keys:
          type: array
          items:
            $ref: "#/components/schemas/Key"
      required:
        - keys
    KeyWithClient:
      type: object
      additionalProperties: false
      properties:
        key:
          $ref: "#/components/schemas/JWKKey"
        client:
          $ref: "#/components/schemas/Client"
      required:
        - key
        - client
    JWKKey:
      description: "Models a JWK"
      type: object
      additionalProperties: false
      properties:
        kty:
          type: string
        key_ops:
          type: array
          items:
            type: string
        use:
          type: string
        alg:
          type: string
        kid:
          type: string
        x5u:
          type: string
          minLength: 1
        x5t:
          type: string
        "x5t#S256":
          type: string
        x5c:
          type: array
          items:
            type: string
        crv:
          type: string
        x:
          type: string
        "y":
          type: string
        d:
          type: string
        k:
          type: string
        "n":
          type: string
        e:
          type: string
        p:
          type: string
        q:
          type: string
        dp:
          type: string
        dq:
          type: string
        qi:
          type: string
        oth:
          uniqueItems: false
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/OtherPrimeInfo"
      required:
        - kty
        - kid
    OtherPrimeInfo:
      title: OtherPrimeInfo
      type: object
      additionalProperties: false
      properties:
        r:
          type: string
        d:
          type: string
        t:
          type: string
      required:
        - r
        - d
        - t
    ClientSeed:
      description: Models the seed for a client to be persisted
      type: object
      additionalProperties: false
      properties:
        clientId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        kind:
          $ref: "#/components/schemas/ClientKind"
        users:
          items:
            type: string
            format: uuid
      required:
        - consumerId
        - name
        - kind
        - createdAt
        - users
    Client:
      description: Models a Client
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        purposes:
          type: array
          items:
            $ref: "#/components/schemas/Purpose"
        users:
          type: array
          items:
            type: string
            format: uuid
          uniqueItems: true
        kind:
          $ref: "#/components/schemas/ClientKind"
      required:
        - id
        - consumerId
        - name
        - purposes
        - users
        - kind
        - createdAt
    Clients:
      type: array
      items:
        $ref: "#/components/schemas/Client"
    KeyUse:
      type: string
      description: Represents the Use field of key
      enum:
        - SIG
        - ENC
    UserSeed:
      description: Models the seed for a User-Client correlation to be persisted
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          format: uuid
      required:
        - userId
    Purpose:
      type: object
      additionalProperties: false
      properties:
        states:
          $ref: "#/components/schemas/ClientStatesChain"
      required:
        - states
    PurposeSeed:
      type: object
      additionalProperties: false
      properties:
        states:
          $ref: "#/components/schemas/ClientStatesChainSeed"
      required:
        - states
    ClientStatesChain:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
        eservice:
          $ref: "#/components/schemas/ClientEServiceDetails"
        agreement:
          $ref: "#/components/schemas/ClientAgreementDetails"
        purpose:
          $ref: "#/components/schemas/ClientPurposeDetails"
      required:
        - id
        - eservice
        - agreement
        - purpose
    ClientStatesChainSeed:
      type: object
      additionalProperties: false
      properties:
        eservice:
          $ref: "#/components/schemas/ClientEServiceDetailsSeed"
        agreement:
          $ref: "#/components/schemas/ClientAgreementDetailsSeed"
        purpose:
          $ref: "#/components/schemas/ClientPurposeDetailsSeed"
      required:
        - eservice
        - agreement
        - purpose
    ClientEServiceDetails:
      type: object
      additionalProperties: false
      properties:
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
        audience:
          type: array
          items:
            type: string
        voucherLifespan:
          type: integer
          format: int32
      required:
        - eserviceId
        - descriptorId
        - state
        - audience
        - voucherLifespan
    ClientEServiceDetailsSeed:
      type: object
      additionalProperties: false
      properties:
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
        audience:
          type: array
          items:
            type: string
        voucherLifespan:
          type: integer
          format: int32
      required:
        - eserviceId
        - descriptorId
        - state
        - audience
        - voucherLifespan
    ClientEServiceDetailsUpdate:
      type: object
      additionalProperties: false
      properties:
        state:
          $ref: "#/components/schemas/ClientComponentState"
        descriptorId:
          type: string
          format: uuid
        audience:
          type: array
          items:
            type: string
        voucherLifespan:
          type: integer
          format: int32
      required:
        - descriptorId
        - state
        - audience
        - voucherLifespan
    ClientAgreementDetails:
      type: object
      additionalProperties: false
      properties:
        eserviceId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        agreementId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - eserviceId
        - consumerId
        - agreementId
        - state
    ClientAgreementDetailsSeed:
      type: object
      additionalProperties: false
      properties:
        eserviceId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        agreementId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - eserviceId
        - consumerId
        - agreementId
        - state
    ClientPurposeDetails:
      type: object
      additionalProperties: false
      properties:
        purposeId:
          type: string
          format: uuid
        versionId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - purposeId
        - versionId
        - state
    ClientAgreementDetailsUpdate:
      type: object
      additionalProperties: false
      properties:
        agreementId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - agreementId
        - state
    ClientAgreementAndEServiceDetailsUpdate:
      type: object
      additionalProperties: false
      properties:
        agreementId:
          type: string
          format: uuid
        agreementState:
          $ref: "#/components/schemas/ClientComponentState"
        descriptorId:
          type: string
          format: uuid
        audience:
          type: array
          items:
            type: string
        voucherLifespan:
          type: integer
          format: int32
        eserviceState:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - agreementId
        - agreementState
        - descriptorId
        - audience
        - voucherLifespan
        - eserviceState
    ClientPurposeDetailsSeed:
      type: object
      additionalProperties: false
      properties:
        purposeId:
          type: string
          format: uuid
        versionId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - purposeId
        - versionId
        - state
    ClientComponentState:
      type: string
      description: Represents the State of an object related to the purpose
      enum:
        - ACTIVE
        - INACTIVE
    ClientPurposeDetailsUpdate:
      type: object
      additionalProperties: false
      properties:
        versionId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/ClientComponentState"
      required:
        - versionId
        - state
    ClientKind:
      type: string
      description: kind of client
      enum:
        - CONSUMER
        - API
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: "^[ -~]{0,64}$"
          type: string
        correlationId:
          description: Unique identifier of the request
          example: "53af4f2d-0c87-41ef-a645-b726a821852b"
          maxLength: 64
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: "^.{0,1024}$"
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/ProblemError"
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: "^[0-9]{3}-[0-9]{4}$"
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: "^.{0,1024}$"
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: "A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725)."
      scheme: bearer
      bearerFormat: JWT
