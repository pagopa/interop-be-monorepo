name: PR validation
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5 # v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-check-formatting-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-check-formatting
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json
      - run: pnpm format:check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5 # v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-lint-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-lint-
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json
      - run: pnpm lint

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5 # v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-check-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-check
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true
      - run: pnpm check

  # INIZIO NUOVA LOGICA TEST
  # Job per scoprire dinamicamente i gruppi di test dai file test.config.json
  find_test_groups:
    name: Find Test Groups
    needs: [formatting, lint, check] # Dipende dai controlli iniziali
    runs-on: ubuntu-latest
    outputs:
      test_groups: ${{ steps.set_groups_output.outputs.test_groups }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d2759364c9af683 # v4
      - name: Find and parse test.config.json files
        id: set_groups_output
        run: |
          ALL_TEST_GROUPS="[]"

          TEMP_GROUPS=$(find packages -type f -name "test.config.json" | while read -r config_file; do
            PACKAGE_PATH=$(dirname "$config_file")
            PACKAGE_NAME=$(basename "$PACKAGE_PATH")

            # Utilizza jq per leggere il file JSON e formattarlo.
            # Se `.testPaths` è un array, costruisce i percorsi completi.
            # Altrimenti (se `.testPaths` è assente, null, o non un array),
            # imposta `paths` a un array vuoto `[]`.
            jq --arg name "$PACKAGE_NAME" \
               --argjson paths_root "$PACKAGE_PATH" \
               '{
                 name: $name,
                 paths: (if .testPaths | type == "array" then
                           [.testPaths[] as $path | "\($paths_root)/\($path)"]
                         else
                           [] # Fallback a un array vuoto se testPaths non è un array o non esiste
                         end)
               }' \
               "$config_file"
          done | jq -s '.')

          # Aggiorna ALL_TEST_GROUPS solo se TEMP_GROUPS contiene dati validi e non vuoti.
          if [ -n "$TEMP_GROUPS" ] && [ "$TEMP_GROUPS" != "null" ] && [ "$TEMP_GROUPS" != "[]" ]; then
            ALL_TEST_GROUPS="$TEMP_GROUPS"
          fi

          echo "Discovered Test Groups: $ALL_TEST_GROUPS"
          echo "test_groups=$ALL_TEST_GROUPS" >> "$GITHUB_OUTPUT"

  # Job per eseguire i test in parallelo, uno per ogni gruppo scoperto
  run_grouped_tests:
    name: Run Tests for ${{ matrix.group.name }}
    needs: [find_test_groups] # Dipende dal job che scopre i gruppi
    # Aggiungi un 'if' per assicurarti che il job venga saltato se non ci sono test_groups validi.
    # `fromJson(...) | length > 0` controlla che l'array non sia vuoto.
    if: needs.find_test_groups.outputs.test_groups != '[]' && fromJson(needs.find_test_groups.outputs.test_groups) | length > 0
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Permette a tutti i job della matrice di finire anche se uno fallisce
      matrix:
        # La matrice viene popolata dinamicamente con l'output del job find_test_groups
        group: ${{ fromJson(needs.find_test_groups.outputs.test_groups) }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5 # v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          # La chiave della cache include il nome del gruppo per cache isolate per ogni test suite
          key: ${{ runner.os }}-turbo-test-${{ matrix.group.name }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-test-${{ matrix.group.name }}-
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Vitest for ${{ matrix.group.name }}
        # Questo script esegue Vitest all'interno della cartella del package specifico.
        # Se `testPaths` dal file di configurazione è vuoto, esegue Vitest su tutta la cartella del package.
        run: |
          TEST_PATHS_ARRAY=$(echo "${{ toJSON(matrix.group.paths) }}" | jq -r '.[]')
          if [ -z "$TEST_PATHS_ARRAY" ]; then
            echo "No specific test paths defined for package ${{ matrix.group.name }}. Running all tests in package."
            pnpm --dir packages/${{ matrix.group.name }} test
          else
            echo "Running tests in package ${{ matrix.group.name }} at paths: $TEST_PATHS_ARRAY"
            pnpm --dir packages/${{ matrix.group.name }} test $TEST_PATHS_ARRAY
          fi
        env:
          DOCKER_HOST: unix:///var/run/docker.sock
  # FINE NUOVA LOGICA TEST

  lint-openapi:
    name: Lint Open Api specification
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d2759364c9af683 # v4
      - uses: stoplightio/spectral-action@577bade2d6e0eeb50528c94182a5588bf961ae8f # v0.8.12
        with:
          file_glob: "./packages/api-clients/open-api/!(selfcareV2ClientApi.yml|authorizationManagementApi.yaml|notifierApi.yml|apiGatewayApi.yml)"

  find_dockerfiles:
    name: Find Dockerfiles
    # AGGIORNATO: Ora dipende da run_grouped_tests
    needs: [formatting, lint, check, run_grouped_tests, lint-openapi]
    if: ${{ github.base_ref == 'develop' || github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_packages_output.outputs.packages }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d2759364c9af683 # v4
      - name: Find packages
        id: set_packages_output
        run: |
          PACKAGES=$(find packages -type f -path "*/Dockerfile" | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> "$GITHUB_OUTPUT"

  docker_build:
    name: Build
    needs: [find_dockerfiles]
    if: ${{ github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    environment: ecr-ro
    permissions:
      contents: read
      id-token: write
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.find_dockerfiles.outputs.packages) }}
    env:
      DOCKER_BUILD_SUMMARY: "false"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d2759364c9af683 # v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.IAM_ROLE_ARN }}
          role-session-name: be-monorepo-pr-validation-${{ github.run_number }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: packages/${{ matrix.package }}/Dockerfile
          build-args: |
            NODE_REGISTRY=${{ vars.NODE_REGISTRY }}
          push: false

  check_build_result:
    name: Build Result
    needs: [docker_build]
    if: ${{ always() && github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check build result
        run: |
          [[ ${{ needs.docker_build.result }} != 'success' ]] && exit 1
          exit 0

