name: PR validation
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-check-formatting-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-check-formatting
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json
      - run: pnpm format:check

  # check:
  #   name: Check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #     - name: Cache turbo setup
  #       uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
  #       with:
  #         path: |
  #           .turbo
  #           packages/*/.turbo
  #         key: ${{ runner.os }}-turbo-check-${{ github.ref_name }}
  #         restore-keys: |
  #           ${{ runner.os }}-turbo-check
  #     - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
  #       with:
  #         node-version-file: ./package.json
  #     - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
  #       with:
  #         run_install: true
  #     - run: pnpm check


  lint-openapi:
    name: Lint Open Api specification
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: stoplightio/spectral-action@577bade2d6e0eeb50528c94182a5588bf961ae8f # v0.8.12
        with:
          file_glob: "./packages/api-clients/open-api/!(selfcareV2ClientApi.yml|authorizationManagementApi.yaml|notifierApi.yml|apiGatewayApi.yml)"

  get_packages_to_test:
    name: Get packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Find packages with test directories
        id: get-packages
        run: |
          PACKAGES=$(find packages -mindepth 1 -maxdepth 1 -type d -exec test -d '{}/test' \; -print | while read -r DIR; do
            PACKAGE_NAME=$(jq -r '.name' "$DIR/package.json")
            echo "$PACKAGE_NAME"
          done | grep -v 'commons-test' | sort | jq -R -s -c 'split("\n")[:-1]')
          
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  create_shards:
    name: Create shards
    runs-on: ubuntu-latest
    needs: [get_packages_to_test]
    outputs:
      matrix: ${{ steps.shard-packages.outputs.matrix }}
    steps:
      - name: Create shards matrix
        id: shard-packages
        run: |
          PACKAGES_JSON='${{ needs.get_packages_to_test.outputs.packages }}'
          PACKAGES=$(echo "$PACKAGES_JSON" | jq -r '.[]')
          
          NUM_SHARDS=10
          SHARDS=()
          for i in $(seq 0 $((NUM_SHARDS-1))); do
              SHARDS[$i]=""
          done
          
          INDEX=0
          while read -r PACKAGE; do
              if [[ -n "$PACKAGE" ]]; then
                  SHARDS[$((INDEX % NUM_SHARDS))]+="\"$PACKAGE\","
                  INDEX=$((INDEX + 1))
              fi
          done <<< "$PACKAGES"
          
          JSON_OUTPUT="["
          for SHARD in "${SHARDS[@]}"; do
              if [[ -n "$SHARD" ]]; then
                  JSON_OUTPUT+="["
                  JSON_OUTPUT+="${SHARD::-1}"
                  JSON_OUTPUT+="],"
              fi
          done
          
          JSON_OUTPUT=${JSON_OUTPUT::-1}
          JSON_OUTPUT+="]"
          
          echo "matrix=$JSON_OUTPUT" >> $GITHUB_OUTPUT

  lint_sharded:
    name: Run lint on shard ${{ matrix.shard_index }}
    runs-on: ubuntu-latest
    needs: [get_packages_to_test, create_shards, formatting, lint-openapi]
    strategy:
      fail-fast: false
      matrix:
        shard: ${{ fromJson(needs.create_shards.outputs.matrix) }}
        include:
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[0] }}
            shard_index: 1
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[1] }}
            shard_index: 2
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[2] }}
            shard_index: 3
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[3] }}
            shard_index: 4
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[4] }}
            shard_index: 5
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[5] }}
            shard_index: 6
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[6] }}
            shard_index: 7
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[7] }}
            shard_index: 8
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[8] }}
            shard_index: 9
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[9] }}
            shard_index: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-lint-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-lint-
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true
      - name: Run lint for shard
        run: |
          PACKAGES_JSON='${{ toJson(matrix.shard) }}'
          echo "$PACKAGES_JSON" | jq -r '.[]' | while read -r PACKAGE; do
            echo "Running lint for package: $PACKAGE"
            pnpm --filter "$PACKAGE" lint
          done

  test_sharded:
    name: Run tests on shard ${{ matrix.shard_index }}
    runs-on: ubuntu-latest
    needs: [formatting, lint_sharded, lint-openapi, create_shards]  # check
    strategy:
      fail-fast: false
      matrix:
        shard: ${{ fromJson(needs.create_shards.outputs.matrix) }}
        include:
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[0] }}
            shard_index: 1
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[1] }}
            shard_index: 2
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[2] }}
            shard_index: 3
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[3] }}
            shard_index: 4
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[4] }}
            shard_index: 5
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[5] }}
            shard_index: 6
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[6] }}
            shard_index: 7
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[7] }}
            shard_index: 8
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[8] }}
            shard_index: 9
          - shard: ${{ fromJson(needs.create_shards.outputs.matrix)[9] }}
            shard_index: 10
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache turbo setup
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-test-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-test
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true
      - name: Run tests for shard
        run: |
          PACKAGES_JSON='${{ toJson(matrix.shard) }}'
          echo "$PACKAGES_JSON" | jq -r '.[]' | while read -r PACKAGE; do
            echo "Running tests for package: $PACKAGE"
            pnpm --filter "$PACKAGE" test
          done

  find_dockerfiles:
    name: Find Dockerfiles
    needs: [formatting, lint_sharded, test_sharded, lint-openapi]  # check
    if: ${{ github.base_ref == 'develop' || github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_packages_output.outputs.packages }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Find packages
        id: set_packages_output
        run: |
          PACKAGES=$(find packages -type f -path "*/Dockerfile" | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  docker_build:
    name: Docker Build
    needs: [find_dockerfiles]
    if: ${{ github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    environment: ecr-ro
    permissions:
      contents: read
      id-token: write
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.find_dockerfiles.outputs.packages) }}
    env:
      DOCKER_BUILD_SUMMARY: "false"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.IAM_ROLE_ARN }}
          role-session-name: be-monorepo-pr-validation-${{ github.run_number }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: packages/${{ matrix.package }}/Dockerfile
          build-args: |
            NODE_REGISTRY=${{ vars.NODE_REGISTRY }}
          push: false

  check_build_result:
    name: Build Result
    needs: [docker_build]
    if: ${{ always() && github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check build result
        run: |
          [[ ${{ needs.docker_build.result }} != 'success' ]] && exit 1
          exit 0
