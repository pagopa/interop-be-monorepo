name: PR validation
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  find_packages:
    name: Find Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_packages_output.outputs.packages }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      
      - name: Find packages
        id: set_packages_output
        run: |
          # PACKAGES=$(find packages -type d -path "packages/*" -d 1 | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          PACKAGES="[\"commons\", \"catalog-process\", \"api-clients\"]" # TODO: remove after testing
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  packages_validation:
    name: Packages validation
    needs: [find_packages]
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.find_packages.outputs.packages) }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
        with:
          run_install: true

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: ./package.json

      - name: Install Turbo (global)
        run: |
          set -euo pipefail

          TURBO_VERSION="$(jq -r '.devDependencies.turbo' package.json)"
          pnpm install add "turbo@$TURBO_VERSION" --global

      - name: Restore Turbo cache for ${{ matrix.package }}
        uses: actions/cache@640a1c2554105b57832a23eea0b4672fc7a790d5
        with:
          path: |
            .turbo
            packages/${{ matrix.package }}/.turbo
          key: turbo-${{ github.ref_name }}-${{ matrix.package }}

      # - name: Extract Turbo package name
      #   run: |
      #     set -euo pipefail
      #     TURBO_PACKAGE_NAME="$(jq -r '.name' packages/${{ matrix.package }}/package.json)"
      #     echo "TURBO_PACKAGE_NAME=$TURBO_PACKAGE_NAME" >> "$GITHUB_ENV"

      # - name: Check formatting
      #   run: |
      #     cd "packages/${{ matrix.package }}"
      #     turbo format:check
      #
      # - name: Lint
      #   run: |
      #     cd "packages/${{ matrix.package }}"
      #     turbo lint
      #
      # - name: Check
      #   run: |
      #     cd "packages/${{ matrix.package }}"
      #     turbo check

      - name: Test
        env:
          DEBUG: "testcontainers*"
        run: |
          cd "packages/${{ matrix.package }}"
          pnpm run test:integration:old

  lint-openapi:
    name: Lint Open Api specification
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: stoplightio/spectral-action@6416fd018ae38e60136775066eb3e98172143141 # v0.8.13
        with:
          file_glob: "./packages/api-clients/open-api/!(selfcareV2ClientApi.yml|authorizationManagementApi.yaml|notifierApi.yml|apiGatewayApi.yml)"

  find_dockerfiles:
    name: Find Dockerfiles
    needs: [packages_validation, lint-openapi]
    if: ${{ github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set_packages_output.outputs.packages }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Find packages
        id: set_packages_output
        run: |
          PACKAGES=$(find packages -type f -path "*/Dockerfile" | awk -F'/' '{print $2}' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  docker_build:
    name: Build
    needs: [find_dockerfiles]
    if: ${{ github.base_ref == 'main' }}
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    environment: ecr-ro
    permissions:
      contents: read
      id-token: write
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.find_dockerfiles.outputs.packages) }}
    env:
      DOCKER_BUILD_SUMMARY: "false"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Build Docker image
        uses: docker/build-push-action@55146d969b0dff1a5c12630229609757af5b1081
        with:
          context: .
          file: packages/${{ matrix.package }}/Dockerfile
          build-args: |
            NODE_REGISTRY=${{ vars.NODE_REGISTRY }}
          push: false

  check_build_result:
    name: Build Result
    needs: [docker_build]
    if: ${{ always() && github.base_ref == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check build result
        run: |
          [[ ${{ needs.docker_build.result }} != 'success' ]] && exit 1
          exit 0
