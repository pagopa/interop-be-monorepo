name: PR validation
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  formatting:
    name: Check formatting
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    steps:
      - uses: actions/checkout@v4
      - name: Cache turbo setup
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-check-formatting-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-check-formatting
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - run: pnpm format:check

  lint-shard:
    name: Lint Shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    strategy:
      fail-fast: false
      matrix:
        shardTotal: [3] # Puoi regolare il numero di shard per il linting (es. 3, 5, 10)
        shardIndex: [1, 2, 3] # Deve corrispondere a shardTotal
    steps:
      - uses: actions/checkout@v4
      - name: Cache turbo setup
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-lint-${{ github.ref_name }}-${{ matrix.shardIndex }}
          restore-keys: |
            ${{ runner.os }}-turbo-lint-
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@v4
        with:
          run_install: true

      - name: Calculate packages for shard ${{ matrix.shardIndex }}
        id: filter_packages
        run: |
          # Trova tutti i pacchetti nella monorepo che contengono un file package.json
          # Adattare questo comando se la struttura dei tuoi pacchetti è diversa o se non tutti i sub-directory di 'packages' sono package validi.
          # Ad esempio, potresti leggere il campo 'workspaces' dal package.json radice o pnpm-workspace.yaml
          ALL_PACKAGES=$(find packages -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort)

          if [ -z "$ALL_PACKAGES" ]; then
            echo "Nessun pacchetto trovato. Verifica il percorso 'packages/'."
            # Potresti voler fallire il job qui o saltare l'esecuzione del linting
            exit 1
          fi

          # Converti la lista in un array Bash
          readarray -t PACKAGE_ARRAY <<< "$ALL_PACKAGES"

          # Calcola la dimensione di ogni shard
          TOTAL_PACKAGES=${#PACKAGE_ARRAY[@]}
          SHARD_TOTAL=${{ matrix.shardTotal }}
          SHARD_INDEX=${{ matrix.shardIndex }}

          # Calcola l'indice di inizio e fine per questo shard
          START_INDEX=$(awk "BEGIN { print int(($SHARD_INDEX - 1) * $TOTAL_PACKAGES / $SHARD_TOTAL) }")
          END_INDEX=$(awk "BEGIN { print int($SHARD_INDEX * $TOTAL_PACKAGES / $SHARD_TOTAL) - 1 }")

          FILTERED_PACKAGES=""
          # Gestione speciale per il caso in cui START_INDEX > END_INDEX (es. troppi shard per pochi pacchetti)
          if [ "$START_INDEX" -le "$END_INDEX" ]; then
              for (( i=$START_INDEX; i<=$END_INDEX; i++ )); do
                  PACKAGE_NAME=${PACKAGE_ARRAY[$i]}
                  if [ -n "$PACKAGE_NAME" ]; then
                      FILTERED_PACKAGES+=" --filter=./packages/$PACKAGE_NAME"
                  fi
              done
          else
              echo "Lo shard ${{ matrix.shardIndex }} non ha pacchetti da elaborare."
          fi

          echo "Packages for shard $SHARD_INDEX: $FILTERED_PACKAGES"
          echo "filtered_packages=$FILTERED_PACKAGES" >> "$GITHUB_OUTPUT"

      - name: Run Lint with sharding
        # Esegui il linting solo se ci sono pacchetti da filtrare per questo shard
        if: ${{ steps.filter_packages.outputs.filtered_packages != '' }}
        run: |
          pnpm turbo lint ${{ steps.filter_packages.outputs.filtered_packages }} -- --cache --cache-strategy content --cache-location .eslintcache

  check:
    name: Check
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    steps:
      - uses: actions/checkout@v4
      - name: Cache turbo setup
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-check-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-turbo-check
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - run: pnpm check

  test:
    name: Test Shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    strategy:
      fail-fast: false
      matrix:
        shardTotal: [10]
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    steps:
      - uses: actions/checkout@v4
      - name: Cache turbo setup
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            packages/*/.turbo
          key: ${{ runner.os }}-turbo-test-${{ github.ref_name }}-${{ matrix.shardIndex }}
          restore-keys: |
            ${{ runner.os }}-turbo-test-
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - name: Run Vitest tests with sharding
        run: |
          pnpm turbo run test \
            --filter='./packages/*' \
            -- -- \
            --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} \
            --coverage \
            --reporter=json \
            --outputFile=coverage/shard-results-${{ matrix.shardIndex }}.json \
            --coverage.reporter=lcov \
            --coverage.outputFile=coverage/lcov.info-${{ matrix.shardIndex }}
      - name: Upload coverage artifacts for shard ${{ matrix.shardIndex }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-shard-${{ matrix.shardIndex }}
          path: coverage/lcov.info-${{ matrix.shardIndex }}
          retention-days: 1

  merge_test_coverage:
    name: Merge Test Coverage
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    needs: test
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: ./package.json
      - uses: pnpm/action-setup@v4
        with:
          run_install: true
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Merge LCOV coverage reports
        run: |
          mkdir -p coverage
          find coverage-artifacts -name "lcov.info-*" -exec cp {} coverage/ \;
          pnpm vitest run --merge-reports --coverage.reporter=lcov --coverage.outputFile=coverage/lcov.info
      - name: Upload merged coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: coverage/lcov.info
          retention-days: 7

  lint-openapi:
    name: Lint Open Api specification
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: stoplightio/spectral-action@577bade2d6e0eeb50528c941ae8f # v0.8.12
        with:
          file_glob: "./packages/api-clients/open-api/!(selfcareV2ClientApi.yml|authorizationManagementApi.yaml|notifierApi.yml|apiGatewayApi.yml)"

  find_dockerfiles:
    name: Find Dockerfiles
    # Tutte le job di controllo preliminari devono essere completate prima di trovare i Dockerfile
    needs: [formatting, lint-shard, check, test, lint-openapi]
    # La condizione 'if' deve essere inclusa solo se vuoi che il job sia condizionale
    if: ${{ github.base_ref == 'develop' || github.base_ref == 'main' }}
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    outputs:
      packages: ${{ steps.set_packages_output.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - name: Find packages
        id: set_packages_output
        run: |
          # Questo comando è robusto e dovrebbe trovare correttamente i nomi dei pacchetti
          PACKAGES=$(find packages -type f -path "*/Dockerfile" | awk -F'/' '{print $2}' | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles for packages: $PACKAGES" # Log per debug

  docker_build:
    name: Build
    needs: [find_dockerfiles] # Dipende da find_dockerfiles per ottenere la lista dei pacchetti
    if: ${{ github.base_ref == 'main' && needs.find_dockerfiles.outputs.packages != '[]' }} # Esegui solo se la base è 'main' E ci sono pacchetti da costruire
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    environment: ecr-ro
    permissions:
      contents: read
      id-token: write
    strategy:
      max-parallel: 5 # Puoi aumentare questo valore se i tuoi runner CodeBuild lo permettono
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.find_dockerfiles.outputs.packages) }}
    env:
      DOCKER_BUILD_SUMMARY: "false"
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.IAM_ROLE_ARN }}
          role-session-name: be-monorepo-pr-validation-${{ github.run_number }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/${{ matrix.package }}/Dockerfile
          build-args: |
            NODE_REGISTRY=${{ vars.NODE_REGISTRY }}
          push: false

  check_build_result:
    name: Build Result
    needs: [docker_build] # Dipende dal successo o fallimento di docker_build
    # Esegui sempre, ma solo se github.base_ref è 'main'.
    # Non è necessario controllare needs.docker_build.result qui, perché se docker_build non è stato eseguito,
    # la sua 'result' sarà 'skipped' o 'cancelled', che non è 'success'.
    if: ${{ always() && github.base_ref == 'main' }}
    runs-on: ["codebuild-pagopa-interop-be-monorepo-github-runners-dev-${{ github.run_id }}-${{ github.run_attempt }}"]
    steps:
      - name: Check build result
        run: |
          # Questo comando fallirà il job 'check_build_result' se docker_build non è stato un successo.
          # Questo copre anche i casi di 'skipped' o 'cancelled' per docker_build.
          if [ "${{ needs.docker_build.result }}" != "success" ]; then
              echo "La build Docker non è stata completata con successo o è stata saltata/cancellata."
              exit 1
          fi
          echo "La build Docker è stata completata con successo."