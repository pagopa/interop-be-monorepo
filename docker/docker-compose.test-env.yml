services:
  postgres:
    volumes:
      - ./event-store-init.sql:/docker-entrypoint-initdb.d/01-init.sql
    image: postgres:14
    environment:
      POSTGRES_DB: testDb
      POSTGRES_USER: testUser
      POSTGRES_PASSWORD: testPassword
    ports:
      - 6001:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testUser"]
      interval: 5s
      timeout: 5s
      retries: 10

  readmodel:
    volumes:
      - readmodel-volume:/data/db # Mappatura del volume per MongoDB
    image: mongo:4.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: testUser
      MONGO_INITDB_ROOT_PASSWORD: testPassword
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10

  readmodel-sql:
    volumes:
      - ./readmodel-db:/docker-entrypoint-initdb.d
    image: postgres:14 # Stessa versione di postgres dell'event store
    ports:
      - 6002:5433 # Esposto sulla porta 6002 sull'host, porta interna 5433
    environment:
      PGPORT: 5433 # Porta interna usata dal container
      POSTGRES_DB: testDb
      POSTGRES_USER: testUser
      POSTGRES_PASSWORD: testPassword
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testUser -p 5433"] # Controlla sulla porta interna 5433
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.2.5-alpine3.20
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:RELEASE.2024-02-06T21-36-22Z
    entrypoint: >
      /usr/bin/minio server /data --console-address ':9001'
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: testawskey # use this as AWS S3 access key ID
      MINIO_ROOT_PASSWORD: testawssecret # use this as AWS S3 secret access key
      MINIO_SITE_REGION: eu-south-1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./minio-data:/data

  minio-seed:
    image: minio/mc:RELEASE.2024-02-09T22-18-24Z
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        mc alias set minio http://minio:9000 testawskey testawssecret;
        mc ready minio;
        echo 'MinIO is ready. Seeding data...';
        mc mb minio/interop-local-bucket || true;
        mc mb minio/interop-datalake-bucket || true;
        mc mb minio/interop-application-import-export-local || true;
        mc mb minio/interop-data-lake-interfaces-exports-local-es1 || true;
        mc mb --with-lock minio/interop-generated-jwt-audit || true;
        mc cp --recursive data/ minio/;
      "
    volumes:
      - ./minio-seed:/data

  dynamodb:
    volumes:
      - ./dynamo-db-data:/data
    image: amazon/dynamodb-local:2.5.2
    command: "-jar DynamoDBLocal.jar -inMemory -sharedDb"
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/shell"]
      interval: 5s
      timeout: 5s
      retries: 10

  mailpit:
    image: axllent/mailpit:v1.19
    ports:
      - "8025:8025"
      - "1025:1025"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/api/v1/messages"]
      interval: 5s
      timeout: 5s
      retries: 10

  localstack:
    image: nsmithuk/local-kms:3.11.7
    environment:
      PORT: 4566
      KMS_REGION: eu-south-1
    ports:
      - "4566:4566"
      - "4571:4571"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  readmodel-volume:
  readmodel-db:
  localstack_data:
